}
catch_projections
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
WARNINGS
warnings()
## Run ABC x 3 States [low/base/high] ----
## Execute automated forecasts for three regions and three states of nature. Takes a bit, esp. hessian for Central
## will only invoke CTL par changes when state !=base
# for(r in c('North','Central','South')){
#   for(state in c('base','low','high')){
for(r in c('North','Central','South')){
for(state in c('low','high')){
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
} ## end state
} ## end region
## Run ABC x 3 States [low/base/high] ----
## Execute automated forecasts for three regions and three states of nature. Takes a bit, esp. hessian for Central
## will only invoke CTL par changes when state !=base
# for(r in c('North','Central','South')){
#   for(state in c('base','low','high')){
for(r in c('North','Central','South')){
for(state in c('base','low','high')){
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
} ## end state
} ## end region
## Run ABC x 3 States [low/base/high] ----
## Execute automated forecasts for three regions and three states of nature. Takes a bit, esp. hessian for Central
## will only invoke CTL par changes when state !=base
# for(r in c('North','Central','South')){
#   for(state in c('base','low','high')){
for(r in c('North','Central','South')){
for(state in c('low','high')){
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
} ## end state
} ## end region
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
require(dplyr)
require(readr)
require(purrr)
# devtools::install_deps("C:/Users/mkapur/Dropbox/kaputils")
devtools::install_github("mkapur/kaputils", dependencies = F)
library(kaputils)
# devtools::install_github("r4ss/r4ss@2663227")
library(r4ss)
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_readforecastMK.R") ## use dev version
devtools::source_url("https://raw.githubusercontent.com/r4ss/r4ss/development/R/SS_ForeCatch.R") ## use dev version
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_writeforecastMK.R") ## use dev version
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_executivesummaryMK.R")
# source("./R/SS_executivesummaryMK.R")
compname <- c('mkapur',"Maia Kapur")[1]
r = 'Southy'
r = 'South'
state = 'base'
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
warnings
## Run ABC x 3 States [low/base/high] ----
## Execute automated forecasts for three regions and three states of nature. Takes a bit, esp. hessian for Central
## will only invoke CTL par changes when state !=base
# for(r in c('North','Central','South')){
#   for(state in c('base','low','high')){
for(r in c('North','Central','South')){
for(state in c('low','high')){
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
} ## end state
} ## end region
r
state
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
require(dplyr)
require(readr)
require(purrr)
# devtools::install_deps("C:/Users/mkapur/Dropbox/kaputils")
devtools::install_github("mkapur/kaputils", dependencies = F)
library(kaputils)
# devtools::install_github("r4ss/r4ss@2663227")
library(r4ss)
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_readforecastMK.R") ## use dev version
devtools::source_url("https://raw.githubusercontent.com/r4ss/r4ss/development/R/SS_ForeCatch.R") ## use dev version
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_writeforecastMK.R") ## use dev version
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_executivesummaryMK.R")
# source("./R/SS_executivesummaryMK.R")
compname <- c('mkapur',"Maia Kapur")[1]
## Run ABC x 3 States [low/base/high] ----
## Execute automated forecasts for three regions and three states of nature. Takes a bit, esp. hessian for Central
## will only invoke CTL par changes when state !=base
# for(r in c('North','Central','South')){
#   for(state in c('base','low','high')){
for(r in c('North','Central','South')){
for(state in c('low','high')){
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
} ## end state
} ## end region
state
r
state = 'high'
r = 'North'
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
rootdir.temp
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
setwd("C:/Users/mkapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019")
rootdir.temp
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 1,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
state
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 0,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
## Run ABC x 3 States [low/base/high] ----
## Execute automated forecasts for three regions and three states of nature. Takes a bit, esp. hessian for Central
## will only invoke CTL par changes when state !=base
# for(r in c('North','Central','South')){
#   for(state in c('base','low','high')){
for(r in c('North','Central','South')){
for(state in c('low','high')){
rootdir.temp <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_",state)
# newdir.temp <- paste0(rootdir,"/cr",r,"_",catch,"_",state)
if(state == 'base'){ ## only read in once per region
catch_projections <- read.csv(paste0(rootdir.temp,"/cproj_",r,".csv"))
}
SS_autoForecast(rootdir = rootdir.temp,
basedir = "base2015",
catch_proportions = catch_projections[catch_projections$YEAR == 2021,5:ncol(catch_projections)],
state = state,
statesex = 0,
statevals = cr.statevals,
forecast_start = 2021,
forecast_end = 2031,
fixed_catches = catch_projections[catch_projections$YEAR < 2021,5:ncol(catch_projections)],
Flimitfraction = catch_projections$PSTAR_0.45[catch_projections$YEAR >2020])
} ## end state
} ## end region
## sanity check: these should be different. the low state should be less productive.
modb<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_base/forecasts/forecast2030"))
modh<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_high/"))
modl<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_low/"))
modb$derived_quants[grep(paste0("SSB_",2021:2030,collapse = "|"), modb$derived_quants$Label),"Value"] ## start around 18
modh$derived_quants[grep(paste0("SSB_",2021:2030,collapse = "|"), modh$derived_quants$Label),"Value"] ## start around 50s
modl$derived_quants[grep(paste0("SSB_",2021:2030,collapse = "|"), modl$derived_quants$Label),"Value"] ## 10s
modh<- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_high/")
modh<- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_base/forecasts/forecast2030")
modl<- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_low/")
modh<- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_base/forecasts/forecast2030")
modh<- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_high/")
modh<- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_high/")
modh<- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_high")
modl<- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_low")
modh<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_high"))
modb<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_base/forecasts/forecast2030"))
modl<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_low"))
modh$derived_quants[grep(paste0("SSB_",2021:2030,collapse = "|"), modh$derived_quants$Label),"Value"] ## 11
modl$derived_quants[grep(paste0("SSB_",2021:2030,collapse = "|"), modl$derived_quants$Label),"Value"] ## 20
modh<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crCentral_ABC_high/"))
modb<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crCentral_ABC_base/forecasts/forecast2030"))
modl<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crCentral_ABC_low/"))
modh$derived_quants[grep(paste0("SSB_",2021:2030,collapse = "|"), modh$derived_quants$Label),"Value"] ## 11
modl$derived_quants[grep(paste0("SSB_",2019:2030,collapse = "|"), modl$derived_quants$Label),"Value"] ## 20
## Run Const/Upper catch x 3 states ----
## Did these separately because the constant nature of the catch requires
## non-iteration
rootdir <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/")
forecast_start <- 2021; forecast_end <- 2031; t = 10
## base M is -2.94, low is -2.99, high is -2.41
for(r in c('North','Central','South')){ ## loop regions
for(catch in c('constant','upper')){ ## loop catch scen
for(state in c('low','base','high')){
df<-data.frame()
# rootdir.temp <- paste0(rootdir,"cr",r,"_ABC_",state) ## copy region & state
catch_projections <- read.csv(paste0(rootdir,"/cr",r,"_ABC_base/cproj_",r,".csv")) ## from base dir
Flimitfraction <- catch_projections$PSTAR_0.45[catch_projections$YEAR == 2030] ## doesn't really matter, already have catch vals
catch_proportions <- catch_projections[7,5:ncol(catch_projections)]
const.catch <- mean(rowSums(catch_projections[catch_projections$TYPE == 'PROJECTION',5:ncol(catch_projections)])) ## avg 2019/2020
fixed_catches <- catch_projections[catch_projections$TYPE == 'ACTUAL',5:ncol(catch_projections)]
# replist0 <- SS_output(paste0(rootdir,"cr",r,"_ABC_base/base2015")) ## get values specific to this region
if(state != 'base'){
lastrun <- paste0(rootdir,"cr",r,"_ABC_",state)
} else if(state == 'base'){
lastrun <- paste0(rootdir,"cr",r,"_ABC_",state,"/forecasts/forecast2030")
}
mod1 <- SS_output(lastrun, covar = FALSE, hidewarn = T, verbose = F) ## just load once for structure this hasn't executed yet
newdir.temp <- paste0(rootdir,"cr",r,"_",catch,"_",state)
dir.create(newdir.temp) ## make special folder and copy files
file.copy(list.files(lastrun,
full.names = TRUE,
recursive = TRUE),
to = newdir.temp, overwrite = TRUE)
setwd(newdir.temp) ## now forecast2030 appropriate to state is replicated here
## only need to change catches in forecast file
fore <- SS_readforecastMK(file = './forecast.ss',
Nareas = mod1$nareas,
Nfleets = mod1$nfishfleets,
nseas = 1,
version = paste(mod1$SS_versionNumeric),
readAll = TRUE)
fore$vals_fleet_relative_f <- paste(paste0(catch_proportions, collapse = " "))
if(catch == 'constant'){
## apply 2019/2020 average to all yrs
tempForeCatch <- SS_ForeCatch(mod1,
yrs = 2021:(2021+(t-2)),
average = FALSE,
total = const.catch)
fore$ForeCatch[min(which((fore$ForeCatch$Year==2021))):nrow(fore$ForeCatch),]<- tempForeCatch[,1:4]
writecatch <- fore$ForeCatch %>% filter(Year > 2020) %>% group_by(Year) %>% dplyr::summarise(Catch_Used = sum(Catch_or_F))
idx = nrow(writecatch)
writecatch[idx+1,'Year'] <- 2030
writecatch[idx+1,'Catch_Used'] <- const.catch
write.csv(writecatch,
file = "./tempForeCatch.csv",row.names = FALSE) ## save constant catched used
} else if (catch == 'upper'){
## apply 50% over 2021 to all years
upperStream <- 1.5*mod1$derived_quants[grep("ForeCatch_2021", mod1$derived_quants$Label),"Value"]
tempForeCatch <- SS_ForeCatch(mod1,
yrs = 2021:(2021+(t-2)),
average = FALSE,
total = upperStream)
fore$ForeCatch[min(which((fore$ForeCatch$Year==2021))):nrow(fore$ForeCatch),]<- tempForeCatch[,1:4]
writecatch <- fore$ForeCatch %>% filter(Year > 2020) %>% group_by(Year) %>% dplyr::summarise(Catch_Used = sum(Catch_or_F))
idx = nrow(writecatch)
writecatch[idx+1,'Year'] <- 2030
writecatch[idx+1,'Catch_Used'] <- upperStream
write.csv(writecatch,
file = "./tempForeCatch.csv",row.names = FALSE) ## save upperstream catched used
}
## save file
SS_writeforecastMK(fore, file = './forecast.ss', overwrite = TRUE)
## execute this model
setwd(newdir.temp); system('ss3 -nohess') ## works
} ## end states of nature
} ## end catch scenarios
} ## end regions
## Creation of objects for use in template ----
## mod RData
modN <- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_base/forecasts/forecast2030"))
modC <- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crCentral_ABC_base/forecasts/forecast2030"))
modS <- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crSouth_ABC_base/forecasts/forecast2030"))
save(modN,modC,modS, file = paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/China_SS_output2019.RData"))
## Comparison plots
load(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/China_SS_output2019.RData"))
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
endyrvec = 2030,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir =paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare"))
mod.cols = c("#7570B3" ,"#D95F02","#1B9E77")
png(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare/yield_comparison_3_models.png"),
width = 8, height = 6, units = 'in', res = 520)
SSplotYield(modS, col= mod.cols[1], subplot=1)
grid()
SSplotYield(modN, col= mod.cols[2], subplot=1,add = TRUE)
SSplotYield(modC, col= mod.cols[3], subplot=1, add=TRUE)
legend('topright', legend=c('South','North','Central'), col=mod.cols, lwd=3, bg='white', bty='n', cex = 1.5)
dev.off()
## Build decision table (not in SS_executive summary) ----
YOI <- 2021:2030
for(r in c('North','Central','South')){ ## loop regions
dec_table <- matrix(NA, nrow = length(YOI)*3, ncol = 9)
dec_table <- data.frame(dec_table)
names(dec_table) <- c('Scenario','Year','catch',paste(c("spawnbio","depl"),rep(c('low','base','high'),each = 2)))
dec_table$Year <- rep(YOI,3)
idxr <- idxc <- 1
for(catch in c('constant','ABC','upper')){ ## loop catch scen
idxc <- 1 ## reset to initial column for new catch scenario
for(state in c('low','base','high')){
if(catch != 'ABC'  | state != 'base'){
tempdir <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_",catch,"_",state)
} else if(catch == 'ABC'){
tempdir <- paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_",catch,"_",state,"/forecasts/forecast2030")
}
mod <- SS_output(tempdir, covar = F)
if(catch == 'constant' & idxc ==2){
catch_projections <- read.csv(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/cr",r,"_ABC_base/cproj_",r,".csv"))
const.catch <- mean(rowSums(catch_projections[catch_projections$TYPE == 'PROJECTION',5:ncol(catch_projections)])) ## avg 2019/2020
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(const.catch,2)
} else if(catch == 'upper' & idxc ==2){
upperStream <- read.csv(paste0(tempdir,"/tempforecatch.csv"))
#1.5*mod$derived_quants[grep("ForeCatch_2021", mod$derived_quants$Label),"Value"]
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(upperStream[1,2],2)
} else if (catch == 'ABC' &  idxc ==2){
catchvals <- read.csv(paste0(rootdir,"/cr",r,"_ABC_base/forecasts/forecast2030/tempforecatch.csv"))
# mod$timeseries[, grepl('Yr|dead[(]B', names(mod$timeseries))] %>%
# filter(Yr %in% YOI) %>%
# select(-Yr) %>% rowSums(.) %>% round(.,2)
dec_table$catch[idxr:(idxr+length(YOI)-1)] <- round(catchvals$Catch_Used,2)
}
# read.csv(paste0(tempdir,"/tempForeCatch.csv"))
## input what was given to forecast file
dec_table$Scenario[idxr:(idxr+length(YOI)-1)] <- rep(catch, length(idxr:(idxr+length(YOI)-1)))
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+2] <-  mod$derived_quants[grep(paste0("SSB_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
dec_table[idxr:(idxr+length(YOI)-1),idxc*2+3] <-  mod$derived_quants[grep(paste0("Bratio_",YOI,collapse = "|"),
mod$derived_quants$Label),"Value"]
idxc <- idxc+1 ## move to next set of columns as state updates
# idxc <- idxc+3; idxr <-
#     df["Depletion",y] <- paste0(round(basemod10$derived_quants[grep(paste0("Bratio_",YOI[y],collapse = "|"), basemod10$derived_quants$Label),"Value"],3)*100,"%")
} ## end state
idxr <- idxr+length(YOI) ## jump down to next set of years when catch scenario updates
} ## end catch
## rename to look nice
dec_table$Scenario[dec_table$Scenario == 'constant'] <- c(rep(" ",5),'Constant (2019-2020 Average)',rep(" ",5))
dec_table$Scenario[dec_table$Scenario == 'ABC'] <- c(rep(" ",5),'40-10 Rule',rep(" ",5))
dec_table$Scenario[dec_table$Scenario == 'upper'] <- c(rep(" ",5),'Upper Stream',rep(" ",5))
## save dec_table
write.csv(dec_table,
file = paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/txt_files/decision_table_",
r,".csv"),
row.names = F)
} ## end regions
## sanity check: these should be different. the low state should be less productive.
modb<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_base/forecasts/forecast2030"))
require(r4ss)
## sanity check: these should be different. the low state should be less productive.
modb<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_base/forecasts/forecast2030"))
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_writeforecastMK.R") ## use dev version
# devtools::source_url("https://raw.githubusercontent.com/mkapur/kaputils/master/R/SS_executivesummaryMK.R")
# source("./R/SS_executivesummaryMK.R")
compname <- c('mkapur',"Maia Kapur")[1]
## sanity check: these should be different. the low state should be less productive.
modb<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_base/forecasts/forecast2030"))
# modh<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_high/"))
# modl<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_low/"))
#
# modb$derived_quants[grep(paste0("OFLCatch_",2021:2030,collapse = "|"), modb$derived_quants$Label),"Value"] ## start around 18
modb$derived_quants[grep(paste0("ForeCatch_",2021:2030,collapse = "|"), modb$derived_quants$Label),"Value"] ## start around 18
# modh<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_high/"))
# modl<- SS_output(paste0("C:/Users/",compname,"/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_low/"))
#
# modb$derived_quants[grep(paste0("OFLCatch_",2021:2030,collapse = "|"), modb$derived_quants$Label),"Value"] ## start around 18
View(modb$derived_quants[grep(paste0("ForeCatch_",2021:2030,collapse = "|"), modb$derived_quants$Label),"Value"]) ## start around 18
##############################################################################################################
#### loads workspace image of the BASE MODEL(S) from SS_output in r4ss
load("./r4ss/China_SS_output2019.RData")
require(dplyr)
require(readr)
require(purrr)
# devtools::install_deps("C:/Users/mkapur/Dropbox/kaputils")
devtools::install_github("mkapur/kaputils", dependencies = F)
modN$timeseries[, grepl('Yr|dead[(]B', names(modN$timeseries))] %>% filter(Yr %in% 2021:2030) %>% select(-Yr) %>% rowSums(.)
require(r4ss)
require(dply)
require(dplyr)
modN$timeseries[, grepl('Yr|dead[(]B', names(modN$timeseries))] %>% filter(Yr %in% 2021:2030) %>% select(-Yr) %>% rowSums(.)
View(modN$timeseries[, grepl('Yr|dead[(]B', names(modN$timeseries))] %>% filter(Yr %in% 2021:2030) %>% select(-Yr) %>% rowSums(.))
modNother <- SS_output("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_base/forecasts/forecast2021")
modNother$derived_quants[grep(paste0("ForeCatch_",2021:2030,collapse = "|"), modNother$derived_quants$Label),"Value"]
modNother$derived_quants[grep(paste0("OFLCatch_",2021:2030,collapse = "|"), modNother$derived_quants$Label),"Value"]
modN$derived_quants[grep(paste0("OFLCatch_",2021:2030,collapse = "|"), modN$derived_quants$Label),"Value"]
iterOFL <- NULL(); i = 1
for(y in 2021:2030){
modNother <- SS_output(paste0("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_base/forecasts/forecast",y))
iterOFL[i] <- modNother$derived_quants[grep(paste0("OFLCatch_",y,collapse = "|"), modNother$derived_quants$Label),"Value"]
i = i+1
}
iterOFL <- NULL; i = 1
for(y in 2021:2030){
modNother <- SS_output(paste0("C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/crNorth_ABC_base/forecasts/forecast",y))
iterOFL[i] <- modNother$derived_quants[grep(paste0("OFLCatch_",y,collapse = "|"), modNother$derived_quants$Label),"Value"]
i = i+1
}
## print individual ofls as used to computer forecatch
iterOFL
## print individual ofls as used to computer forecatch
View(iterOFL)
