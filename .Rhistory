Ref_pts = Ref_pts[,1:3]
Ref_pts
mod$derived_quants[grep("SSB_U",mod$derived_quants$Label),]
mod$derived_quants[grep("SSB_U",mod$derived_quants$Label),]
names(mod$derived_quants$LABEL)
names(mod$derived_quants[,1])
names(mod$derived_quants)[1]
names(mod$derived_quants)[1] <- 'Label' ## this was all caps in prev mods for some reason
names(mod$derived_quants)
Ref_pts = rbind(
SSB_Unfished    = mod$derived_quants[grep("SSB_U",mod$derived_quants$Label),],
TotBio_Unfished = mod$derived_quants[grep("TotBio",mod$derived_quants$Label),],
Recr_Unfished   = mod$derived_quants[grep("Recr_Un",mod$derived_quants$Label),],
SPB_2015        = mod$derived_quants[grep("SPB_2015",mod$derived_quants$Label),],
Depletion_2015  = mod$derived_quants[grep("Bratio_2015",mod$derived_quants$Label),],
Refpt_sB        = c(NA,NA,NA),
SSB_Btgt        = mod$derived_quants[grep("SSB_Btgt",mod$derived_quants$Label),],
SPR_Btgt        = mod$derived_quants[grep("SPR_Btgt",mod$derived_quants$Label),],
Fstd_Btgt       = mod$derived_quants[grep("Fstd_Btgt",mod$derived_quants$Label),],
TotYield_Btgt   = mod$derived_quants[grep("TotYield_Btgt",mod$derived_quants$Label),],
Refpt_SPR       = c(NA,NA,NA),
SSB_SPRtgt      = mod$derived_quants[grep("SSB_SPRtgt",mod$derived_quants$Label),],
SPR_proxy       = c('SPR_proxy',.5,NA),
Fstd_SPRtgt     = mod$derived_quants[grep("Fstd_SPRtgt",mod$derived_quants$Label),],
TotYield_SPRtgt = mod$derived_quants[grep("TotYield_SPRtgt",mod$derived_quants$Label),],
Refpts_MSY      = c(NA,NA,NA),
SSB_MSY         = mod$derived_quants[grep("SSB_MSY",mod$derived_quants$Label),],
SPR_MSY         = mod$derived_quants[grep("SPR_MSY",mod$derived_quants$Label),],
Fstd_MSY        = mod$derived_quants[grep("Fstd_MSY",mod$derived_quants$Label),],
TotYield_MSY    = mod$derived_quants[grep("TotYield_MSY",mod$derived_quants$Label),] )
Ref_pts$Value
## These should be input but not updated. There's no reason they should change much, but to be safe will load old mods.
rm(modN, modC, modS)
load("./r4ss/China_SS_output2015.RData")
for (model in 1:n_models){
if(model==1){
mod=modN
mod_area='N'
} else {
if(model==2){
mod=modC
mod_area='C'
} else {
mod=modS
mod_area='S'
}}
names(mod$derived_quants)[1] <- 'Label' ## this was all caps in prev mods for some reason
Ref_pts = rbind(
SSB_Unfished    = mod$derived_quants[grep("SSB_U",mod$derived_quants$Label),],
TotBio_Unfished = mod$derived_quants[grep("TotBio",mod$derived_quants$Label),],
Recr_Unfished   = mod$derived_quants[grep("Recr_Un",mod$derived_quants$Label),],
SPB_2015        = mod$derived_quants[grep("SPB_2015",mod$derived_quants$Label),],
Depletion_2015  = mod$derived_quants[grep("Bratio_2015",mod$derived_quants$Label),],
Refpt_sB        = c(NA,NA,NA),
SSB_Btgt        = mod$derived_quants[grep("SSB_Btgt",mod$derived_quants$Label),],
SPR_Btgt        = mod$derived_quants[grep("SPR_Btgt",mod$derived_quants$Label),],
Fstd_Btgt       = mod$derived_quants[grep("Fstd_Btgt",mod$derived_quants$Label),],
TotYield_Btgt   = mod$derived_quants[grep("TotYield_Btgt",mod$derived_quants$Label),],
Refpt_SPR       = c(NA,NA,NA),
SSB_SPRtgt      = mod$derived_quants[grep("SSB_SPRtgt",mod$derived_quants$Label),],
SPR_proxy       = c('SPR_proxy',.5,NA),
Fstd_SPRtgt     = mod$derived_quants[grep("Fstd_SPRtgt",mod$derived_quants$Label),],
TotYield_SPRtgt = mod$derived_quants[grep("TotYield_SPRtgt",mod$derived_quants$Label),],
Refpts_MSY      = c(NA,NA,NA),
SSB_MSY         = mod$derived_quants[grep("SSB_MSY",mod$derived_quants$Label),],
SPR_MSY         = mod$derived_quants[grep("SPR_MSY",mod$derived_quants$Label),],
Fstd_MSY        = mod$derived_quants[grep("Fstd_MSY",mod$derived_quants$Label),],
TotYield_MSY    = mod$derived_quants[grep("TotYield_MSY",mod$derived_quants$Label),] )
Ref_pts = Ref_pts[,1:3]
Ref_pts$Value = as.numeric(Ref_pts$Value)
Ref_pts$StdDev = as.numeric(Ref_pts$StdDev)
Ref_pts$Value1 = ifelse(Ref_pts$Value>=1,as.character(round(Ref_pts$Value,1)),as.character(round(Ref_pts$Value,4)))
Ref_pts$lowerCI = round(Ref_pts$Value +qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$upperCI = round(Ref_pts$Value -qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$lowerCI1 = ifelse(Ref_pts$lowerCI>=1,as.character(round(Ref_pts$lowerCI,1)),as.character(round(Ref_pts$lowerCI,4)))
Ref_pts$upperCI1 = ifelse(Ref_pts$upperCI>=1,as.character(round(Ref_pts$upperCI,1)),as.character(round(Ref_pts$upperCI,4)))
Ref_pts$CI1 = paste("(",Ref_pts$lowerCI1,"-",Ref_pts$upperCI1,")",sep="")
Quantity= c('Unfished spawning output (billions of eggs)',
'Unfished age 5+ biomass (mt)',
'Unfished recruitment (R0, thousands)',
# 'Spawning output (2015, billions of eggs)',
'Depletion (2015)',
'\\textbf{$\\text{Reference points based on } \\mathbf{SB_{40\\%}}$}',
'Proxy spawning output ($B_{40\\%}$)',
'SPR resulting in $B_{40\\%}$ ($SPR_{B40\\%}$)',
'Exploitation rate resulting in $B_{40\\%}$',
'Yield with $SPR_{B40\\%}$ at $B_{40\\%}$ (mt)',
'\\textbf{\\textit{Reference points based on SPR proxy for MSY}}',
'Spawning output',
'$SPR_{proxy}$',
'Exploitation rate corresponding to $SPR_{proxy}$',
'Yield with $SPR_{proxy}$ at $SB_{SPR}$ (mt)',
'\\textbf{\\textit{Reference points based on estimated MSY values}}',
'Spawning output at $MSY$ ($SB_{MSY}$)',
'$SPR_{MSY}$',
'Exploitation rate at $MSY$',
'$MSY$ (mt) '
)
Ref_pts = cbind(Quantity,Ref_pts[,c(4,9)])
Ref_pts[c(6,11,13,16),3]=''
Ref_pts[c(6,11,16),2]=''
colnames(Ref_pts) = c('\\textbf{Quantity}','\\textbf{Estimate}','\\textbf{\\~95\\%  Confidence Interval}')
assign(paste('Ref_pts_',mod_area,sep=''),Ref_pts)
}
Ref_pts = rbind(
SSB_Unfished    = mod$derived_quants[grep("SSB_U",mod$derived_quants$Label),],
TotBio_Unfished = mod$derived_quants[grep("TotBio",mod$derived_quants$Label),],
Recr_Unfished   = mod$derived_quants[grep("Recr_Un",mod$derived_quants$Label),],
SPB_2015        = mod$derived_quants[grep("SPB_2015",mod$derived_quants$Label),],
Depletion_2015  = mod$derived_quants[grep("Bratio_2015",mod$derived_quants$Label),],
Refpt_sB        = c(NA,NA,NA),
SSB_Btgt        = mod$derived_quants[grep("SSB_Btgt",mod$derived_quants$Label),],
SPR_Btgt        = mod$derived_quants[grep("SPR_Btgt",mod$derived_quants$Label),],
Fstd_Btgt       = mod$derived_quants[grep("Fstd_Btgt",mod$derived_quants$Label),],
TotYield_Btgt   = mod$derived_quants[grep("TotYield_Btgt",mod$derived_quants$Label),],
Refpt_SPR       = c(NA,NA,NA),
SSB_SPRtgt      = mod$derived_quants[grep("SSB_SPRtgt",mod$derived_quants$Label),],
SPR_proxy       = c('SPR_proxy',.5,NA),
Fstd_SPRtgt     = mod$derived_quants[grep("Fstd_SPRtgt",mod$derived_quants$Label),],
TotYield_SPRtgt = mod$derived_quants[grep("TotYield_SPRtgt",mod$derived_quants$Label),],
Refpts_MSY      = c(NA,NA,NA),
SSB_MSY         = mod$derived_quants[grep("SSB_MSY",mod$derived_quants$Label),],
SPR_MSY         = mod$derived_quants[grep("SPR_MSY",mod$derived_quants$Label),],
Fstd_MSY        = mod$derived_quants[grep("Fstd_MSY",mod$derived_quants$Label),],
TotYield_MSY    = mod$derived_quants[grep("TotYield_MSY",mod$derived_quants$Label),] )
Ref_pts = Ref_pts[,1:3]
Ref_pts$Value = as.numeric(Ref_pts$Value)
Ref_pts$StdDev = as.numeric(Ref_pts$StdDev)
Ref_pts$Value1 = ifelse(Ref_pts$Value>=1,as.character(round(Ref_pts$Value,1)),as.character(round(Ref_pts$Value,4)))
Ref_pts$lowerCI = round(Ref_pts$Value +qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$upperCI = round(Ref_pts$Value -qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$lowerCI1 = ifelse(Ref_pts$lowerCI>=1,as.character(round(Ref_pts$lowerCI,1)),as.character(round(Ref_pts$lowerCI,4)))
Ref_pts$upperCI1 = ifelse(Ref_pts$upperCI>=1,as.character(round(Ref_pts$upperCI,1)),as.character(round(Ref_pts$upperCI,4)))
Ref_pts$CI1 = paste("(",Ref_pts$lowerCI1,"-",Ref_pts$upperCI1,")",sep="")
Quantity= c('Unfished spawning output (billions of eggs)',
'Unfished age 5+ biomass (mt)',
'Unfished recruitment (R0, thousands)',
# 'Spawning output (2015, billions of eggs)',
'Depletion (2015)',
'\\textbf{$\\text{Reference points based on } \\mathbf{SB_{40\\%}}$}',
'Proxy spawning output ($B_{40\\%}$)',
'SPR resulting in $B_{40\\%}$ ($SPR_{B40\\%}$)',
'Exploitation rate resulting in $B_{40\\%}$',
'Yield with $SPR_{B40\\%}$ at $B_{40\\%}$ (mt)',
'\\textbf{\\textit{Reference points based on SPR proxy for MSY}}',
'Spawning output',
'$SPR_{proxy}$',
'Exploitation rate corresponding to $SPR_{proxy}$',
'Yield with $SPR_{proxy}$ at $SB_{SPR}$ (mt)',
'\\textbf{\\textit{Reference points based on estimated MSY values}}',
'Spawning output at $MSY$ ($SB_{MSY}$)',
'$SPR_{MSY}$',
'Exploitation rate at $MSY$',
'$MSY$ (mt) '
)
Ref_pts = cbind(Quantity,Ref_pts[,c(4,9)])
Quantity
## These should be input but not updated. There's no reason they should change much, but to be safe will load old mods.
rm(modN, modC, modS)
load("./r4ss/China_SS_output2015.RData")
for (model in 1:n_models){
if(model==1){
mod=modN
mod_area='N'
} else {
if(model==2){
mod=modC
mod_area='C'
} else {
mod=modS
mod_area='S'
}}
names(mod$derived_quants)[1] <- 'Label' ## this was all caps in prev mods for some reason
Ref_pts = rbind(
SSB_Unfished    = mod$derived_quants[grep("SSB_U",mod$derived_quants$Label),],
TotBio_Unfished = mod$derived_quants[grep("TotBio",mod$derived_quants$Label),],
Recr_Unfished   = mod$derived_quants[grep("Recr_Un",mod$derived_quants$Label),],
SPB_2015        = mod$derived_quants[grep("SPB_2015",mod$derived_quants$Label),],
Depletion_2015  = mod$derived_quants[grep("Bratio_2015",mod$derived_quants$Label),],
Refpt_sB        = c(NA,NA,NA),
SSB_Btgt        = mod$derived_quants[grep("SSB_Btgt",mod$derived_quants$Label),],
SPR_Btgt        = mod$derived_quants[grep("SPR_Btgt",mod$derived_quants$Label),],
Fstd_Btgt       = mod$derived_quants[grep("Fstd_Btgt",mod$derived_quants$Label),],
TotYield_Btgt   = mod$derived_quants[grep("TotYield_Btgt",mod$derived_quants$Label),],
Refpt_SPR       = c(NA,NA,NA),
SSB_SPRtgt      = mod$derived_quants[grep("SSB_SPRtgt",mod$derived_quants$Label),],
SPR_proxy       = c('SPR_proxy',.5,NA),
Fstd_SPRtgt     = mod$derived_quants[grep("Fstd_SPRtgt",mod$derived_quants$Label),],
TotYield_SPRtgt = mod$derived_quants[grep("TotYield_SPRtgt",mod$derived_quants$Label),],
Refpts_MSY      = c(NA,NA,NA),
SSB_MSY         = mod$derived_quants[grep("SSB_MSY",mod$derived_quants$Label),],
SPR_MSY         = mod$derived_quants[grep("SPR_MSY",mod$derived_quants$Label),],
Fstd_MSY        = mod$derived_quants[grep("Fstd_MSY",mod$derived_quants$Label),],
TotYield_MSY    = mod$derived_quants[grep("TotYield_MSY",mod$derived_quants$Label),] )
Ref_pts = Ref_pts[,1:3]
Ref_pts$Value = as.numeric(Ref_pts$Value)
Ref_pts$StdDev = as.numeric(Ref_pts$StdDev)
Ref_pts$Value1 = ifelse(Ref_pts$Value>=1,as.character(round(Ref_pts$Value,1)),as.character(round(Ref_pts$Value,4)))
Ref_pts$lowerCI = round(Ref_pts$Value +qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$upperCI = round(Ref_pts$Value -qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$lowerCI1 = ifelse(Ref_pts$lowerCI>=1,as.character(round(Ref_pts$lowerCI,1)),as.character(round(Ref_pts$lowerCI,4)))
Ref_pts$upperCI1 = ifelse(Ref_pts$upperCI>=1,as.character(round(Ref_pts$upperCI,1)),as.character(round(Ref_pts$upperCI,4)))
Ref_pts$CI1 = paste("(",Ref_pts$lowerCI1,"-",Ref_pts$upperCI1,")",sep="")
Quantity= c('Unfished spawning output (billions of eggs)',
'Unfished age 5+ biomass (mt)',
'Unfished recruitment (R0, thousands)',
'Spawning output (2015, billions of eggs)',
'Depletion (2015)',
'\\textbf{$\\text{Reference points based on } \\mathbf{SB_{40\\%}}$}',
'Proxy spawning output ($B_{40\\%}$)',
'SPR resulting in $B_{40\\%}$ ($SPR_{B40\\%}$)',
'Exploitation rate resulting in $B_{40\\%}$',
'Yield with $SPR_{B40\\%}$ at $B_{40\\%}$ (mt)',
'\\textbf{\\textit{Reference points based on SPR proxy for MSY}}',
'Spawning output',
'$SPR_{proxy}$',
'Exploitation rate corresponding to $SPR_{proxy}$',
'Yield with $SPR_{proxy}$ at $SB_{SPR}$ (mt)',
'\\textbf{\\textit{Reference points based on estimated MSY values}}',
'Spawning output at $MSY$ ($SB_{MSY}$)',
'$SPR_{MSY}$',
'Exploitation rate at $MSY$',
'$MSY$ (mt) '
)
Ref_pts = cbind(Quantity,Ref_pts[,c(4,9)])
Ref_pts[c(6,11,13,16),3]=''
Ref_pts[c(6,11,16),2]=''
colnames(Ref_pts) = c('\\textbf{Quantity}','\\textbf{Estimate}','\\textbf{\\~95\\%  Confidence Interval}')
assign(paste('Ref_pts_',mod_area,sep=''),Ref_pts)
}
rm(modN, modC, modS)
#             'Spawning output',
#             'SPR_{proxy}',
#             'Exploitation\\textsubscript{123} rate corresponding to $SPR_{proxy}$',
#             'Yield with $SPR_{proxy}$ at $SB_{SPR}$ (mt)',
#             '*Reference points based on estimated MSY values*',
#             'Spawning output at $MSY$ (**SB~MSY~**)',
#             '**SPR~MSY~**$',
#             '\\\\textbf{Exploitation rate at **MSY**}',
#             '**MSY** (mt) '
# )
row.names(Ref_pts) <-  c('Unfished spawning output (billions of eggs)',
'Unfished age 5+ biomass (mt)',
'Unfished recruitment (R0, thousands)',
'Spawning output (2015, billions of eggs)',
'Depletion (2015)',
'*Reference points based on SB_B~40%~*',
'Proxy spawning output B~40%~',
'SPR resulting in B~40%~ (SPR_~B~40%~)',
'Exploitation rate resulting in B~40%~',
'Yield with $SPR_{B40\\%}$ at $B_{40\\%}$ (mt)',
'*Reference points based on SPR proxy for MSY*',
'Spawning output',
'SPR_{proxy}',
'Exploitation\\textsubscript{123} rate corresponding to $SPR_{proxy}$',
'Yield with $SPR_{proxy}$ at $SB_{SPR}$ (mt)',
'*Reference points based on estimated MSY values*',
'Spawning output at $MSY$ (**SB~MSY~**)',
'**SPR~MSY~**$',
'\\\\textbf{Exploitation rate at **MSY**}',
'**MSY** (mt) '
)
## These should be input but not updated. There's no reason they should change much, but to be safe will load old mods.
rm(modN, modC, modS)
load("./r4ss/China_SS_output2015.RData")
for (model in 1:n_models){
if(model==1){
mod=modN
mod_area='N'
} else {
if(model==2){
mod=modC
mod_area='C'
} else {
mod=modS
mod_area='S'
}}
names(mod$derived_quants)[1] <- 'Label' ## this was all caps in prev mods for some reason
Ref_pts = rbind(
SSB_Unfished    = mod$derived_quants[grep("SSB_U",mod$derived_quants$Label),],
TotBio_Unfished = mod$derived_quants[grep("TotBio",mod$derived_quants$Label),],
Recr_Unfished   = mod$derived_quants[grep("Recr_Un",mod$derived_quants$Label),],
SPB_2015        = mod$derived_quants[grep("SPB_2015",mod$derived_quants$Label),],
Depletion_2015  = mod$derived_quants[grep("Bratio_2015",mod$derived_quants$Label),],
Refpt_sB        = c(NA,NA,NA),
SSB_Btgt        = mod$derived_quants[grep("SSB_Btgt",mod$derived_quants$Label),],
SPR_Btgt        = mod$derived_quants[grep("SPR_Btgt",mod$derived_quants$Label),],
Fstd_Btgt       = mod$derived_quants[grep("Fstd_Btgt",mod$derived_quants$Label),],
TotYield_Btgt   = mod$derived_quants[grep("TotYield_Btgt",mod$derived_quants$Label),],
Refpt_SPR       = c(NA,NA,NA),
SSB_SPRtgt      = mod$derived_quants[grep("SSB_SPRtgt",mod$derived_quants$Label),],
SPR_proxy       = c('SPR_proxy',.5,NA),
Fstd_SPRtgt     = mod$derived_quants[grep("Fstd_SPRtgt",mod$derived_quants$Label),],
TotYield_SPRtgt = mod$derived_quants[grep("TotYield_SPRtgt",mod$derived_quants$Label),],
Refpts_MSY      = c(NA,NA,NA),
SSB_MSY         = mod$derived_quants[grep("SSB_MSY",mod$derived_quants$Label),],
SPR_MSY         = mod$derived_quants[grep("SPR_MSY",mod$derived_quants$Label),],
Fstd_MSY        = mod$derived_quants[grep("Fstd_MSY",mod$derived_quants$Label),],
TotYield_MSY    = mod$derived_quants[grep("TotYield_MSY",mod$derived_quants$Label),] )
Ref_pts = Ref_pts[,1:3]
Ref_pts$Value = as.numeric(Ref_pts$Value)
Ref_pts$StdDev = as.numeric(Ref_pts$StdDev)
Ref_pts$Value1 = ifelse(Ref_pts$Value>=1,as.character(round(Ref_pts$Value,1)),as.character(round(Ref_pts$Value,4)))
Ref_pts$lowerCI = round(Ref_pts$Value +qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$upperCI = round(Ref_pts$Value -qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$lowerCI1 = ifelse(Ref_pts$lowerCI>=1,as.character(round(Ref_pts$lowerCI,1)),as.character(round(Ref_pts$lowerCI,4)))
Ref_pts$upperCI1 = ifelse(Ref_pts$upperCI>=1,as.character(round(Ref_pts$upperCI,1)),as.character(round(Ref_pts$upperCI,4)))
Ref_pts$CI1 = paste("(",Ref_pts$lowerCI1,"-",Ref_pts$upperCI1,")",sep="")
# Quantity= c('Unfished spawning output (billions of eggs)',
#             'Unfished age 5+ biomass (mt)',
#             'Unfished recruitment (R0, thousands)',
#             'Spawning output (2015, billions of eggs)',
#             'Depletion (2015)',
#             '*Reference points based on SB_B~40%~*',
#             'Proxy spawning output B~40%~',
#             'SPR resulting in B~40%~ (SPR_~B~40%~)',
#             'Exploitation rate resulting in B~40%~',
#             'Yield with $SPR_{B40\\%}$ at $B_{40\\%}$ (mt)',
#             '*Reference points based on SPR proxy for MSY*',
#             'Spawning output',
#             'SPR_{proxy}',
#             'Exploitation\\textsubscript{123} rate corresponding to $SPR_{proxy}$',
#             'Yield with $SPR_{proxy}$ at $SB_{SPR}$ (mt)',
#             '*Reference points based on estimated MSY values*',
#             'Spawning output at $MSY$ (**SB~MSY~**)',
#             '**SPR~MSY~**$',
#             '\\\\textbf{Exploitation rate at **MSY**}',
#             '**MSY** (mt) '
# )
row.names(Ref_pts) <-  c('Unfished spawning output (billions of eggs)',
'Unfished age 5+ biomass (mt)',
'Unfished recruitment (R0, thousands)',
'Spawning output (2015, billions of eggs)',
'Depletion (2015)',
'*Reference points based on SB_B~40%~*',
'Proxy spawning output B~40%~',
'SPR resulting in B~40%~ (SPR_~B~40%~)',
'Exploitation rate resulting in B~40%~',
'Yield with $SPR_{B40\\%}$ at $B_{40\\%}$ (mt)',
'*Reference points based on SPR proxy for MSY*',
'Spawning output',
'SPR_{proxy}',
'Exploitation\\textsubscript{123} rate corresponding to $SPR_{proxy}$',
'Yield with $SPR_{proxy}$ at $SB_{SPR}$ (mt)',
'*Reference points based on estimated MSY values*',
'Spawning output at $MSY$ (**SB~MSY~**)',
'**SPR~MSY~**$',
'\\\\textbf{Exploitation rate at **MSY**}',
'**MSY** (mt) '
)
Ref_pts = cbind(Ref_pts[,c(4,9)])
Ref_pts[c(6,11,13,16),3]=''
Ref_pts[c(6,11,16),2]=''
colnames(Ref_pts) = c('*Quantity*','*{Estimate}','*{\\~95\\%  Confidence Interval}')
assign(paste('Ref_pts_',mod_area,sep=''),Ref_pts)
}
rm(modN, modC, modS)
Ref_pts
row.names(Ref_pts)
## These should be input but not updated. There's no reason they should change much, but to be safe will load old mods.
rm(modN, modC, modS)
load("./r4ss/China_SS_output2015.RData")
for (model in 1:n_models){
if(model==1){
mod=modN
mod_area='N'
} else {
if(model==2){
mod=modC
mod_area='C'
} else {
mod=modS
mod_area='S'
}}
names(mod$derived_quants)[1] <- 'Label' ## this was all caps in prev mods for some reason
Ref_pts = rbind(
SSB_Unfished    = mod$derived_quants[grep("SSB_U",mod$derived_quants$Label),],
TotBio_Unfished = mod$derived_quants[grep("TotBio",mod$derived_quants$Label),],
Recr_Unfished   = mod$derived_quants[grep("Recr_Un",mod$derived_quants$Label),],
SPB_2015        = mod$derived_quants[grep("SPB_2015",mod$derived_quants$Label),],
Depletion_2015  = mod$derived_quants[grep("Bratio_2015",mod$derived_quants$Label),],
Refpt_sB        = c(NA,NA,NA),
SSB_Btgt        = mod$derived_quants[grep("SSB_Btgt",mod$derived_quants$Label),],
SPR_Btgt        = mod$derived_quants[grep("SPR_Btgt",mod$derived_quants$Label),],
Fstd_Btgt       = mod$derived_quants[grep("Fstd_Btgt",mod$derived_quants$Label),],
TotYield_Btgt   = mod$derived_quants[grep("TotYield_Btgt",mod$derived_quants$Label),],
Refpt_SPR       = c(NA,NA,NA),
SSB_SPRtgt      = mod$derived_quants[grep("SSB_SPRtgt",mod$derived_quants$Label),],
SPR_proxy       = c('SPR_proxy',.5,NA),
Fstd_SPRtgt     = mod$derived_quants[grep("Fstd_SPRtgt",mod$derived_quants$Label),],
TotYield_SPRtgt = mod$derived_quants[grep("TotYield_SPRtgt",mod$derived_quants$Label),],
Refpts_MSY      = c(NA,NA,NA),
SSB_MSY         = mod$derived_quants[grep("SSB_MSY",mod$derived_quants$Label),],
SPR_MSY         = mod$derived_quants[grep("SPR_MSY",mod$derived_quants$Label),],
Fstd_MSY        = mod$derived_quants[grep("Fstd_MSY",mod$derived_quants$Label),],
TotYield_MSY    = mod$derived_quants[grep("TotYield_MSY",mod$derived_quants$Label),] )
Ref_pts = Ref_pts[,1:3]
Ref_pts$Value = as.numeric(Ref_pts$Value)
Ref_pts$StdDev = as.numeric(Ref_pts$StdDev)
Ref_pts$Value1 = ifelse(Ref_pts$Value>=1,as.character(round(Ref_pts$Value,1)),as.character(round(Ref_pts$Value,4)))
Ref_pts$lowerCI = round(Ref_pts$Value +qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$upperCI = round(Ref_pts$Value -qnorm(0.025)*Ref_pts$StdDev, digits=4)
Ref_pts$lowerCI1 = ifelse(Ref_pts$lowerCI>=1,as.character(round(Ref_pts$lowerCI,1)),as.character(round(Ref_pts$lowerCI,4)))
Ref_pts$upperCI1 = ifelse(Ref_pts$upperCI>=1,as.character(round(Ref_pts$upperCI,1)),as.character(round(Ref_pts$upperCI,4)))
Ref_pts$CI1 = paste("(",Ref_pts$lowerCI1,"-",Ref_pts$upperCI1,")",sep="")
Quantity <-  c('Unfished spawning output (billions of eggs)',
'Unfished age 5+ biomass (mt)',
'Unfished recruitment (R0, thousands)',
'Spawning output (2015, billions of eggs)',
'Depletion (2015)',
'*Reference points based on SB_B~40%~*',
'Proxy spawning output B~40%~',
'SPR resulting in B~40%~ (SPR_~B~40%~)',
'Exploitation rate resulting in B~40%~',
'Yield with $SPR_{B40\\%}$ at $B_{40\\%}$ (mt)',
'*Reference points based on SPR proxy for MSY*',
'Spawning output',
'SPR_{proxy}',
'Exploitation\\textsubscript{123} rate corresponding to $SPR_{proxy}$',
'Yield with $SPR_{proxy}$ at $SB_{SPR}$ (mt)',
'*Reference points based on estimated MSY values*',
'Spawning output at $MSY$ (**SB~MSY~**)',
'**SPR~MSY~**$',
'\\\\textbf{Exploitation rate at **MSY**}',
'**MSY** (mt) '
)
Ref_pts = cbind(Quantity, Ref_pts[,c(4,9)])
Ref_pts[c(6,11,13,16),3]=''
Ref_pts[c(6,11,16),2]=''
colnames(Ref_pts) = c('Quantity','Estimate','~95%  Confidence Interval')
assign(paste('Ref_pts_',mod_area,sep=''),Ref_pts)
}
rm(modN, modC, modS)
is.na(mngmnt)
mngmnt = read.csv("./txt_files/mngmt_performance.csv")
is.na(mngmnt)
mngmnt = read.csv("./txt_files/mngmt_performance.csv",na.strings = "")
mngmnt
mngmnt = read.csv("./txt_files/mngmt_performance.csv",na.strings = "na")
mngmnt
## Comparison plots
load("./r4ss/China_SS_output2015.RData")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
endyrvec = 2030,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
require(dplyr)
require(r4ss)
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
endyrvec = 2030,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
endyrvec = 2030,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
endyrvec = 2029,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
load("./r4ss/China_SS_output2015.RData"),
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
require(r4ss)
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
load("./r4ss/China_SS_output2015.RData"),
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
## Comparison plots
load("./r4ss/China_SS_output2019.RData")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
endyrvec = 2030.
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
list(modN, modC, modS) %>% SSsummarize(.) %>%
SSplotComparisons(shadeForecast = TRUE,
endyrvec = 2030,
legendlabels = c("North",'Central','South'),
png = T, print = T,
plotdir = "C:/Users/Maia Kapur/Dropbox/UW/assessments/china_2019_update/chinarock-update-2019/r4ss/plots_compare")
modS$derived_quants[modS$derived_quants$Label == 'Bratio_2029','Value']
paste(round(modS$derived_quants[modS$derived_quants$Label == 'Bratio_2030','Value'],2)*100,"%")
